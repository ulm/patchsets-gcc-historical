diff -Naurp gcc-3.3.5.orig/gcc/Makefile.in gcc-3.3.5/gcc/Makefile.in
--- gcc-3.3.5.orig/gcc/Makefile.in	2005-02-02 02:51:23.000000000 -0800
+++ gcc-3.3.5/gcc/Makefile.in	2005-02-02 02:56:30.918172095 -0800
@@ -768,7 +768,7 @@ OBJS = alias.o bb-reorder.o bitmap.o bui
  sibcall.o simplify-rtx.o ssa.o ssa-ccp.o ssa-dce.o stmt.o		   \
  stor-layout.o stringpool.o timevar.o toplev.o tracer.o tree.o tree-dump.o \
  tree-inline.o unroll.o varasm.o varray.o version.o vmsdbgout.o xcoffout.o \
- et-forest.o $(GGC) $(out_object_file) $(EXTRA_OBJS)
+ et-forest.o protector.o $(GGC) $(out_object_file) $(EXTRA_OBJS)
 
 BACKEND = main.o libbackend.a
 
@@ -802,7 +802,7 @@ LIB2FUNCS_1 = _muldi3 _negdi2 _lshrdi3 _
 
 LIB2FUNCS_2 = _floatdixf _fixunsxfsi _fixtfdi _fixunstfdi _floatditf \
     _clear_cache _trampoline __main _exit _absvsi2 _absvdi2 _addvsi3 \
-    _addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors
+    _addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors _stack_smash_handler
 
 # Defined in libgcc2.c, included only in the static library.
 LIB2FUNCS_ST = _eprintf _bb __gcc_bcmp
@@ -1671,6 +1671,7 @@ ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H
    output.h except.h $(TM_P_H) real.h
 params.o : params.c $(CONFIG_H) $(SYSTEM_H) $(PARAMS_H) toplev.h
 hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) $(HOOKS_H)
+protector.o: protector.c $(CONFIG_H)
 
 $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \
    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \
diff -Naurp gcc-3.3.5.orig/gcc/calls.c gcc-3.3.5/gcc/calls.c
--- gcc-3.3.5.orig/gcc/calls.c	2005-02-02 02:51:23.000000000 -0800
+++ gcc-3.3.5/gcc/calls.c	2005-02-02 02:56:30.957165840 -0800
@@ -2345,7 +2345,7 @@ ignoring return value of function declar
 	    /* For variable-sized objects, we must be called with a target
 	       specified.  If we were to allocate space on the stack here,
 	       we would have no way of knowing when to free it.  */
-	    rtx d = assign_temp (TREE_TYPE (exp), 1, 1, 1);
+	    rtx d = assign_temp (TREE_TYPE (exp), 5, 1, 1);
 
 	    mark_temp_addr_taken (d);
 	    structure_value_addr = XEXP (d, 0);
diff -Naurp gcc-3.3.5.orig/gcc/combine.c gcc-3.3.5/gcc/combine.c
--- gcc-3.3.5.orig/gcc/combine.c	2005-02-02 02:51:19.000000000 -0800
+++ gcc-3.3.5/gcc/combine.c	2005-02-02 02:56:30.987161029 -0800
@@ -3873,7 +3873,17 @@ combine_simplify_rtx (x, op0_mode, last,
 	  rtx inner_op0 = XEXP (XEXP (x, 0), 1);
 	  rtx inner_op1 = XEXP (x, 1);
 	  rtx inner;
-
+	  
+#ifndef FRAME_GROWS_DOWNWARD
+	  if (flag_propolice_protection
+	      && code == PLUS
+	      && other == frame_pointer_rtx
+	      && GET_CODE (inner_op0) == CONST_INT
+	      && GET_CODE (inner_op1) == CONST_INT
+	      && INTVAL (inner_op0) > 0
+	      && INTVAL (inner_op0) + INTVAL (inner_op1) <= 0)
+	    return x;
+#endif
 	  /* Make sure we pass the constant operand if any as the second
 	     one if this is a commutative operation.  */
 	  if (CONSTANT_P (inner_op0) && GET_RTX_CLASS (code) == 'c')
@@ -4286,6 +4296,11 @@ combine_simplify_rtx (x, op0_mode, last,
 	 they are now checked elsewhere.  */
       if (GET_CODE (XEXP (x, 0)) == PLUS
 	  && CONSTANT_ADDRESS_P (XEXP (XEXP (x, 0), 1)))
+#ifndef FRAME_GROWS_DOWNWARD
+	if (! (flag_propolice_protection
+	       && XEXP (XEXP (x, 0), 0) == frame_pointer_rtx
+	       && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT))
+#endif
 	return gen_binary (PLUS, mode,
 			   gen_binary (PLUS, mode, XEXP (XEXP (x, 0), 0),
 				       XEXP (x, 1)),
@@ -4414,7 +4429,10 @@ combine_simplify_rtx (x, op0_mode, last,
 
       /* Canonicalize (minus A (plus B C)) to (minus (minus A B) C) for
 	 integers.  */
-      if (GET_CODE (XEXP (x, 1)) == PLUS && INTEGRAL_MODE_P (mode))
+      if (GET_CODE (XEXP (x, 1)) == PLUS && INTEGRAL_MODE_P (mode)
+	  && (! (flag_propolice_protection
+		 && XEXP (XEXP (x, 1), 0) == frame_pointer_rtx
+		 && GET_CODE (XEXP (XEXP (x, 1), 1)) == CONST_INT)))
 	return gen_binary (MINUS, mode,
 			   gen_binary (MINUS, mode, XEXP (x, 0),
 				       XEXP (XEXP (x, 1), 0)),
diff -Naurp gcc-3.3.5.orig/gcc/config/t-linux gcc-3.3.5/gcc/config/t-linux
--- gcc-3.3.5.orig/gcc/config/t-linux	2003-06-04 09:56:11.000000000 -0700
+++ gcc-3.3.5/gcc/config/t-linux	2005-02-02 02:56:31.000000000 -0800
@@ -4,7 +4,7 @@ STMP_FIXPROTO =
 # Compile crtbeginS.o and crtendS.o with pic.
 CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC
 # Compile libgcc2.a with pic.
-TARGET_LIBGCC2_CFLAGS = -fPIC
+TARGET_LIBGCC2_CFLAGS = -fPIC -DHAVE_SYSLOG
 
 # Override t-slibgcc-elf-ver to export some libgcc symbols with
 # the symbol versions that glibc used.
diff -Naurp gcc-3.3.5.orig/gcc/cse.c gcc-3.3.5/gcc/cse.c
--- gcc-3.3.5.orig/gcc/cse.c	2004-03-21 08:28:59.000000000 -0800
+++ gcc-3.3.5/gcc/cse.c	2005-02-02 02:56:31.000000000 -0800
@@ -4309,7 +4309,14 @@ fold_rtx (x, insn)
 
 	      if (new_const == 0)
 		break;
-
+#ifndef FRAME_GROWS_DOWNWARD
+	      if (flag_propolice_protection
+		  && GET_CODE (y) == PLUS
+		  && XEXP (y, 0) == frame_pointer_rtx
+		  && INTVAL (inner_const) > 0
+		  && INTVAL (new_const) <= 0)
+		break;
+#endif
 	      /* If we are associating shift operations, don't let this
 		 produce a shift of the size of the object or larger.
 		 This could occur when we follow a sign-extend by a right
@@ -4844,6 +4851,14 @@ cse_insn (insn, libcall_insn)
       if (SET_DEST (x) == pc_rtx
 	  && GET_CODE (SET_SRC (x)) == LABEL_REF)
 	;
+      /* cut the reg propagation of stack-protected argument */
+      else if (x->volatil) {
+	rtx x1 = SET_DEST (x);
+	if (GET_CODE (x1) == SUBREG && GET_CODE (SUBREG_REG (x1)) == REG)
+	  x1 = SUBREG_REG (x1);
+	if (! REGNO_QTY_VALID_P(REGNO (x1)))
+	  make_new_qty (REGNO (x1), GET_MODE (x1));
+      }
 
       /* Don't count call-insns, (set (reg 0) (call ...)), as a set.
 	 The hard function value register is used only once, to copy to
diff -Naurp gcc-3.3.5.orig/gcc/explow.c gcc-3.3.5/gcc/explow.c
--- gcc-3.3.5.orig/gcc/explow.c	2003-12-24 08:04:46.000000000 -0800
+++ gcc-3.3.5/gcc/explow.c	2005-02-02 02:56:31.000000000 -0800
@@ -86,7 +86,8 @@ plus_constant_wide (x, c)
   rtx tem;
   int all_constant = 0;
 
-  if (c == 0)
+  if (c == 0
+      && !(flag_propolice_protection && x == virtual_stack_vars_rtx))
     return x;
 
  restart:
@@ -187,7 +188,8 @@ plus_constant_wide (x, c)
       break;
     }
 
-  if (c != 0)
+  if (c != 0
+      || (flag_propolice_protection && x == virtual_stack_vars_rtx))
     x = gen_rtx_PLUS (mode, x, GEN_INT (c));
 
   if (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF)
@@ -538,6 +540,21 @@ memory_address (mode, x)
 	 in certain cases.  This is not necessary since the code
 	 below can handle all possible cases, but machine-dependent
 	 transformations can make better code.  */
+      if (flag_propolice_protection)
+	{
+#define FRAMEADDR_P(X) (GET_CODE (X) == PLUS				\
+			&& XEXP (X, 0) == virtual_stack_vars_rtx	\
+			&& GET_CODE (XEXP (X, 1)) == CONST_INT)
+	  rtx y;
+	  if (FRAMEADDR_P (x)) goto win;
+	  for (y=x; y!=0 && GET_CODE (y)==PLUS; y = XEXP (y, 0))
+	    {
+	      if (FRAMEADDR_P (XEXP (y, 0)))
+		XEXP (y, 0) = force_reg (GET_MODE (XEXP (y, 0)), XEXP (y, 0));
+	      if (FRAMEADDR_P (XEXP (y, 1)))
+		XEXP (y, 1) = force_reg (GET_MODE (XEXP (y, 1)), XEXP (y, 1));
+	    }
+	}
       LEGITIMIZE_ADDRESS (x, oldx, mode, win);
 
       /* PLUS and MULT can appear in special ways
diff -Naurp gcc-3.3.5.orig/gcc/expr.c gcc-3.3.5/gcc/expr.c
--- gcc-3.3.5.orig/gcc/expr.c	2005-02-02 02:51:23.000000000 -0800
+++ gcc-3.3.5/gcc/expr.c	2005-02-02 02:56:58.000000000 -0800
@@ -46,6 +46,7 @@ Software Foundation, 59 Temple Place - S
 #include "intl.h"
 #include "tm_p.h"
 #include "input.h"
+#include "protector.h"
 
 /* Decide whether a function's arguments should be processed
    from first to last or from last to first.
@@ -1564,7 +1565,7 @@ move_by_pieces (to, from, len, align)
 
       if (USE_LOAD_PRE_DECREMENT (mode) && data.reverse && ! data.autinc_from)
 	{
-	  data.from_addr = copy_addr_to_reg (plus_constant (from_addr, len));
+	  data.from_addr = copy_addr_to_reg (plus_constant (from_addr, len-GET_MODE_SIZE (mode)));
 	  data.autinc_from = 1;
 	  data.explicit_inc_from = -1;
 	}
@@ -1578,7 +1579,7 @@ move_by_pieces (to, from, len, align)
 	data.from_addr = copy_addr_to_reg (from_addr);
       if (USE_STORE_PRE_DECREMENT (mode) && data.reverse && ! data.autinc_to)
 	{
-	  data.to_addr = copy_addr_to_reg (plus_constant (to_addr, len));
+	  data.to_addr = copy_addr_to_reg (plus_constant (to_addr, len-GET_MODE_SIZE (mode)));
 	  data.autinc_to = 1;
 	  data.explicit_inc_to = -1;
 	}
@@ -1695,11 +1696,13 @@ move_by_pieces_1 (genfun, mode, data)
 	from1 = adjust_address (data->from, mode, data->offset);
 
       if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)
-	emit_insn (gen_add2_insn (data->to_addr,
-				  GEN_INT (-(HOST_WIDE_INT)size)));
+	if (data->explicit_inc_to < -1)
+	  emit_insn (gen_add2_insn (data->to_addr,
+				    GEN_INT (-(HOST_WIDE_INT)size)));
       if (HAVE_PRE_DECREMENT && data->explicit_inc_from < 0)
-	emit_insn (gen_add2_insn (data->from_addr,
-				  GEN_INT (-(HOST_WIDE_INT)size)));
+	if (data->explicit_inc_from < -1)
+	  emit_insn (gen_add2_insn (data->from_addr,
+				    GEN_INT (-(HOST_WIDE_INT)size)));
 
       if (data->to)
 	emit_insn ((*genfun) (to1, from1));
@@ -2872,7 +2875,7 @@ store_by_pieces_1 (data, align)
 
       if (USE_STORE_PRE_DECREMENT (mode) && data->reverse && ! data->autinc_to)
 	{
-	  data->to_addr = copy_addr_to_reg (plus_constant (to_addr, data->len));
+	  data->to_addr = copy_addr_to_reg (plus_constant (to_addr, data->len-GET_MODE_SIZE (mode)));
 	  data->autinc_to = 1;
 	  data->explicit_inc_to = -1;
 	}
@@ -2943,8 +2946,9 @@ store_by_pieces_2 (genfun, mode, data)
 	to1 = adjust_address (data->to, mode, data->offset);
 
       if (HAVE_PRE_DECREMENT && data->explicit_inc_to < 0)
-	emit_insn (gen_add2_insn (data->to_addr,
-				  GEN_INT (-(HOST_WIDE_INT) size)));
+	if (data->explicit_inc_to < -1)
+	  emit_insn (gen_add2_insn (data->to_addr,
+				    GEN_INT (-(HOST_WIDE_INT) size)));
 
       cst = (*data->constfun) (data->constfundata, data->offset, mode);
       emit_insn ((*genfun) (to1, cst));
@@ -5954,7 +5958,9 @@ force_operand (value, target)
 	  && GET_CODE (XEXP (value, 0)) == PLUS
 	  && GET_CODE (XEXP (XEXP (value, 0), 0)) == REG
 	  && REGNO (XEXP (XEXP (value, 0), 0)) >= FIRST_VIRTUAL_REGISTER
-	  && REGNO (XEXP (XEXP (value, 0), 0)) <= LAST_VIRTUAL_REGISTER)
+	  && REGNO (XEXP (XEXP (value, 0), 0)) <= LAST_VIRTUAL_REGISTER
+	  && (!flag_propolice_protection
+	      || XEXP (XEXP (value, 0), 0) != virtual_stack_vars_rtx))
 	{
 	  rtx temp = expand_simple_binop (GET_MODE (value), code,
 					  XEXP (XEXP (value, 0), 0), op2,
@@ -8138,7 +8144,8 @@ expand_expr (exp, target, tmode, modifie
       /* If adding to a sum including a constant,
 	 associate it to put the constant outside.  */
       if (GET_CODE (op1) == PLUS
-	  && CONSTANT_P (XEXP (op1, 1)))
+	  && CONSTANT_P (XEXP (op1, 1))
+	  && !(flag_propolice_protection && (contains_fp (op0) || contains_fp (op1))))
 	{
 	  rtx constant_term = const0_rtx;
 
diff -Naurp gcc-3.3.5.orig/gcc/flags.h gcc-3.3.5/gcc/flags.h
--- gcc-3.3.5.orig/gcc/flags.h	2003-06-20 14:18:41.000000000 -0700
+++ gcc-3.3.5/gcc/flags.h	2005-02-02 02:56:31.000000000 -0800
@@ -690,4 +690,13 @@ extern const char *flag_random_seed;
 #define HONOR_SIGN_DEPENDENT_ROUNDING(MODE) \
   (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && !flag_unsafe_math_optimizations)
 
+/* Nonzero means use propolice as a stack protection method */
+
+extern int flag_propolice_protection;
+extern int flag_stack_protection;
+
+/* Warn when not issuing stack smashing protection for some reason */
+
+extern int warn_stack_protector;
+
 #endif /* ! GCC_FLAGS_H */
diff -Naurp gcc-3.3.5.orig/gcc/function.c gcc-3.3.5/gcc/function.c
--- gcc-3.3.5.orig/gcc/function.c	2005-02-02 02:51:19.000000000 -0800
+++ gcc-3.3.5/gcc/function.c	2005-02-02 02:58:29.000000000 -0800
@@ -59,6 +59,7 @@ Software Foundation, 59 Temple Place - S
 #include "tm_p.h"
 #include "integrate.h"
 #include "langhooks.h"
+#include "protector.h"
 
 #ifndef TRAMPOLINE_ALIGNMENT
 #define TRAMPOLINE_ALIGNMENT FUNCTION_BOUNDARY
@@ -145,6 +146,10 @@ static GTY(()) varray_type epilogue;
 /* Array of INSN_UIDs to hold the INSN_UIDs for each sibcall epilogue
    in this function.  */
 static GTY(()) varray_type sibcall_epilogue;
+
+/* Current boundary mark for character arrays.  */
+int temp_boundary_mark = 0;
+
 
 /* In order to evaluate some expressions, such as function calls returning
    structures in memory, we need to temporarily allocate stack locations.
@@ -198,6 +203,8 @@ struct temp_slot GTY(())
   /* The size of the slot, including extra space for alignment.  This
      info is for combine_temp_slots.  */
   HOST_WIDE_INT full_size;
+  /* Boundary mark of a character array and the others. This info is for propolice */
+  int boundary_mark;
 };
 
 /* This structure is used to record MEMs or pseudos used to replace VAR, any
@@ -634,6 +641,7 @@ assign_stack_local (mode, size, align)
    whose lifetime is controlled by CLEANUP_POINT_EXPRs.  KEEP is 3
    if we are to allocate something at an inner level to be treated as
    a variable in the block (e.g., a SAVE_EXPR).
+   KEEP is 5 if we allocate a place to return structure.
 
    TYPE is the type that will be used for the stack slot.  */
 
@@ -647,6 +655,8 @@ assign_stack_temp_for_type (mode, size, 
   unsigned int align;
   struct temp_slot *p, *best_p = 0;
   rtx slot;
+  int char_array = (flag_propolice_protection
+		    && keep == 1 && search_string_def (type));
 
   /* If SIZE is -1 it means that somebody tried to allocate a temporary
      of a variable size.  */
@@ -672,7 +682,8 @@ assign_stack_temp_for_type (mode, size, 
 	&& ! p->in_use
 	&& objects_must_conflict_p (p->type, type)
 	&& (best_p == 0 || best_p->size > p->size
-	    || (best_p->size == p->size && best_p->align > p->align)))
+	    || (best_p->size == p->size && best_p->align > p->align))
+	&& (! char_array || p->boundary_mark != 0))
       {
 	if (p->align == align && p->size == size)
 	  {
@@ -707,6 +718,7 @@ assign_stack_temp_for_type (mode, size, 
 	      p->address = 0;
 	      p->rtl_expr = 0;
 	      p->type = best_p->type;
+	      p->boundary_mark = best_p->boundary_mark;
 	      p->next = temp_slots;
 	      temp_slots = p;
 
@@ -767,6 +779,7 @@ assign_stack_temp_for_type (mode, size, 
       p->full_size = frame_offset - frame_offset_old;
 #endif
       p->address = 0;
+      p->boundary_mark = char_array?++temp_boundary_mark:0;
       p->next = temp_slots;
       temp_slots = p;
     }
@@ -937,14 +950,16 @@ combine_temp_slots ()
 	    int delete_q = 0;
 	    if (! q->in_use && GET_MODE (q->slot) == BLKmode)
 	      {
-		if (p->base_offset + p->full_size == q->base_offset)
+		if (p->base_offset + p->full_size == q->base_offset &&
+		    p->boundary_mark == q->boundary_mark)
 		  {
 		    /* Q comes after P; combine Q into P.  */
 		    p->size += q->size;
 		    p->full_size += q->full_size;
 		    delete_q = 1;
 		  }
-		else if (q->base_offset + q->full_size == p->base_offset)
+		else if (q->base_offset + q->full_size == p->base_offset &&
+			 p->boundary_mark == q->boundary_mark)
 		  {
 		    /* P comes after Q; combine P into Q.  */
 		    q->size += p->size;
@@ -1512,8 +1527,9 @@ put_reg_into_stack (function, reg, type,
     }
 
   if (new == 0)
-    new = assign_stack_local_1 (decl_mode, GET_MODE_SIZE (decl_mode),
-				consecutive_p ? -2 : 0, func);
+    new = function ?
+          assign_stack_local_1 (decl_mode, GET_MODE_SIZE (decl_mode), consecutive_p ? -2 : 0, func):
+          assign_stack_local_for_pseudo_reg (decl_mode, GET_MODE_SIZE (decl_mode), consecutive_p ? -2 : 0);
 
   PUT_CODE (reg, MEM);
   PUT_MODE (reg, decl_mode);
@@ -3993,7 +4009,8 @@ instantiate_virtual_regs_1 (loc, object,
 		 constant with that register.  */
 	      temp = gen_reg_rtx (Pmode);
 	      XEXP (x, 0) = new;
-	      if (validate_change (object, &XEXP (x, 1), temp, 0))
+	      if (validate_change (object, &XEXP (x, 1), temp, 0)
+		  && ! flag_propolice_protection)
 		emit_insn_before (gen_move_insn (temp, new_offset), object);
 	      else
 		{
diff -Naurp gcc-3.3.5.orig/gcc/gcse.c gcc-3.3.5/gcc/gcse.c
--- gcc-3.3.5.orig/gcc/gcse.c	2003-12-20 11:59:50.000000000 -0800
+++ gcc-3.3.5/gcc/gcse.c	2005-02-02 02:56:31.000000000 -0800
@@ -4212,7 +4212,7 @@ cprop_insn (insn, alter_jumps)
       /* Find an assignment that sets reg_used and is available
 	 at the start of the block.  */
       set = find_avail_set (regno, insn);
-      if (! set)
+      if (! set || set->expr->volatil)
 	continue;
 
       pat = set->expr;
diff -Naurp gcc-3.3.5.orig/gcc/integrate.c gcc-3.3.5/gcc/integrate.c
--- gcc-3.3.5.orig/gcc/integrate.c	2003-07-14 18:05:43.000000000 -0700
+++ gcc-3.3.5/gcc/integrate.c	2005-02-02 02:56:31.000000000 -0800
@@ -401,6 +401,10 @@ copy_decl_for_inlining (decl, from_fn, t
   /* These args would always appear unused, if not for this.  */
   TREE_USED (copy) = 1;
 
+  /* The inlined variable is marked as INLINE not to sweep by propolice */
+  if (flag_propolice_protection && TREE_CODE (copy) == VAR_DECL)
+    DECL_INLINE (copy) = 1;
+
   /* Set the context for the new declaration.  */
   if (!DECL_CONTEXT (decl))
     /* Globals stay global.  */
@@ -1965,6 +1969,10 @@ copy_rtx_and_substitute (orig, map, for_
 
 	      seq = get_insns ();
 	      end_sequence ();
+#ifdef FRAME_GROWS_DOWNWARD
+	      if (flag_propolice_protection && GET_CODE (seq) == SET)
+		RTX_INTEGRATED_P (SET_SRC (seq)) = 1;
+#endif
 	      emit_insn_after (seq, map->insns_at_start);
 	      return temp;
 	    }
diff -Naurp gcc-3.3.5.orig/gcc/libgcc-std.ver gcc-3.3.5/gcc/libgcc-std.ver
--- gcc-3.3.5.orig/gcc/libgcc-std.ver	2004-07-27 03:54:52.000000000 -0700
+++ gcc-3.3.5/gcc/libgcc-std.ver	2005-02-02 02:56:31.000000000 -0800
@@ -174,6 +174,12 @@ GCC_3.0 {
   _Unwind_SjLj_RaiseException
   _Unwind_SjLj_ForcedUnwind
   _Unwind_SjLj_Resume
+
+%if !defined(_LIBC_PROVIDES_SSP_)
+  # stack smash handler symbols
+  __guard
+  __stack_smash_handler
+%endif
 }
 
 %inherit GCC_3.3 GCC_3.0
diff -Naurp gcc-3.3.5.orig/gcc/libgcc2.c gcc-3.3.5/gcc/libgcc2.c
--- gcc-3.3.5.orig/gcc/libgcc2.c	2002-10-23 03:47:24.000000000 -0700
+++ gcc-3.3.5/gcc/libgcc2.c	2005-02-02 02:56:31.000000000 -0800
@@ -1993,3 +1993,104 @@ atexit (func_ptr func)
 #endif /* NEED_ATEXIT */
 
 #endif /* L_exit */
+
+#ifdef L_stack_smash_handler
+#ifndef _LIBC_PROVIDES_SSP_
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+
+#ifdef _POSIX_SOURCE
+#include <signal.h>
+#endif
+
+#if defined(HAVE_SYSLOG)
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+
+#include <sys/syslog.h>
+#ifndef _PATH_LOG
+#define _PATH_LOG "/dev/log"
+#endif
+#endif
+
+long __guard[8] = {0,0,0,0,0,0,0,0};
+static void __guard_setup (void) __attribute__ ((constructor)) ;
+static void __guard_setup (void)
+{
+  int fd;
+  if (__guard[0]!=0) return;
+  fd = open ("/dev/urandom", 0);
+  if (fd != -1) {
+    ssize_t size = read (fd, (char*)&__guard, sizeof(__guard));
+    close (fd) ;
+    if (size == sizeof(__guard)) return;
+  }
+  /* If a random generator can't be used, the protector switches the guard
+     to the "terminator canary" */
+  ((char*)__guard)[0] = 0; ((char*)__guard)[1] = 0;
+  ((char*)__guard)[2] = '\n'; ((char*)__guard)[3] = 255;
+}
+void __stack_smash_handler (char func[], int damaged ATTRIBUTE_UNUSED)
+{
+#if defined (__GNU_LIBRARY__)
+  extern char * __progname;
+#endif
+  const char message[] = ": stack smashing attack in function ";
+  int bufsz = 256, len;
+  char buf[bufsz];
+#if defined(HAVE_SYSLOG)
+  int LogFile;
+  struct sockaddr_un SyslogAddr;  /* AF_UNIX address of local logger */
+#endif
+#ifdef _POSIX_SOURCE
+  {
+    sigset_t mask;
+    sigfillset(&mask);
+    sigdelset(&mask, SIGABRT);	/* Block all signal handlers */
+    sigprocmask(SIG_BLOCK, &mask, NULL); /* except SIGABRT */
+  }
+#endif
+
+  strcpy(buf, "<2>"); len=3;	/* send LOG_CRIT */
+#if defined (__GNU_LIBRARY__)
+  strncat(buf, __progname, bufsz-len-1); len = strlen(buf);
+#endif
+  if (bufsz>len) {strncat(buf, message, bufsz-len-1); len = strlen(buf);}
+  if (bufsz>len) {strncat(buf, func, bufsz-len-1); len = strlen(buf);}
+
+  /* print error message */
+  write (STDERR_FILENO, buf+3, len-3);
+#if defined(HAVE_SYSLOG)
+  if ((LogFile = socket(AF_UNIX, SOCK_DGRAM, 0)) != -1) {
+
+    /*
+     * Send "found" message to the "/dev/log" path
+     */
+    SyslogAddr.sun_family = AF_UNIX;
+    (void)strncpy(SyslogAddr.sun_path, _PATH_LOG,
+		  sizeof(SyslogAddr.sun_path) - 1);
+    SyslogAddr.sun_path[sizeof(SyslogAddr.sun_path) - 1] = '\0';
+    sendto(LogFile, buf, len, 0, (struct sockaddr *)&SyslogAddr,
+	   sizeof(SyslogAddr));
+  }
+#endif
+
+#ifdef _POSIX_SOURCE
+  { /* Make sure the default handler is associated with SIGABRT */
+    struct sigaction sa;
+    
+    memset(&sa, 0, sizeof(struct sigaction));
+    sigfillset(&sa.sa_mask);	/* Block all signals */
+    sa.sa_flags = 0;
+    sa.sa_handler = SIG_DFL;
+    sigaction(SIGABRT, &sa, NULL);
+    (void)kill(getpid(), SIGABRT);
+  }
+#endif
+  _exit(127);
+}
+#endif
+#endif
diff -Naurp gcc-3.3.5.orig/gcc/loop.c gcc-3.3.5/gcc/loop.c
--- gcc-3.3.5.orig/gcc/loop.c	2005-02-02 02:51:22.000000000 -0800
+++ gcc-3.3.5/gcc/loop.c	2005-02-02 02:56:31.000000000 -0800
@@ -6554,6 +6554,14 @@ general_induction_var (loop, x, src_reg,
   if (GET_CODE (*mult_val) == USE)
     *mult_val = XEXP (*mult_val, 0);
 
+#ifndef FRAME_GROWS_DOWNWARD
+  if (flag_propolice_protection
+      && GET_CODE (*add_val) == PLUS
+      && (XEXP (*add_val, 0) == frame_pointer_rtx
+	  || XEXP (*add_val, 1) == frame_pointer_rtx))
+    return 0;
+#endif
+
   if (is_addr)
     *pbenefit += address_cost (orig_x, addr_mode) - reg_address_cost;
   else
diff -Naurp gcc-3.3.5.orig/gcc/optabs.c gcc-3.3.5/gcc/optabs.c
--- gcc-3.3.5.orig/gcc/optabs.c	2004-08-03 13:06:46.000000000 -0700
+++ gcc-3.3.5/gcc/optabs.c	2005-02-02 02:56:31.000000000 -0800
@@ -703,6 +703,26 @@ expand_binop (mode, binoptab, op0, op1, 
   if (target)
     target = protect_from_queue (target, 1);
 
+  if (flag_propolice_protection
+      && binoptab->code == PLUS
+      && op0 == virtual_stack_vars_rtx
+      && GET_CODE(op1) == CONST_INT)
+    {
+      int icode = (int) binoptab->handlers[(int) mode].insn_code;
+      if (target)
+	temp = target;
+      else
+	temp = gen_reg_rtx (mode);
+
+      if (! (*insn_data[icode].operand[0].predicate) (temp, mode)
+	  || GET_CODE (temp) != REG)
+	temp = gen_reg_rtx (mode);
+
+      emit_insn (gen_rtx_SET (VOIDmode, temp,
+			      gen_rtx_PLUS (GET_MODE (op0), op0, op1)));
+      return temp;
+    }
+
   if (flag_force_mem)
     {
       op0 = force_not_mem (op0);
diff -Naurp gcc-3.3.5.orig/gcc/reload1.c gcc-3.3.5/gcc/reload1.c
--- gcc-3.3.5.orig/gcc/reload1.c	2005-02-02 02:51:19.000000000 -0800
+++ gcc-3.3.5/gcc/reload1.c	2005-02-02 02:56:31.000000000 -0800
@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - S
 #include "toplev.h"
 #include "except.h"
 #include "tree.h"
+#include "protector.h"
 
 /* This file contains the reload pass of the compiler, which is
    run after register allocation has been done.  It checks that
@@ -2010,7 +2011,7 @@ alter_reg (i, from_reg)
       if (from_reg == -1)
 	{
 	  /* No known place to spill from => no slot to reuse.  */
-	  x = assign_stack_local (GET_MODE (regno_reg_rtx[i]), total_size,
+	  x = assign_stack_local_for_pseudo_reg (GET_MODE (regno_reg_rtx[i]), total_size,
 				  inherent_size == total_size ? 0 : -1);
 	  if (BYTES_BIG_ENDIAN)
 	    /* Cancel the  big-endian correction done in assign_stack_local.
diff -Naurp gcc-3.3.5.orig/gcc/simplify-rtx.c gcc-3.3.5/gcc/simplify-rtx.c
--- gcc-3.3.5.orig/gcc/simplify-rtx.c	2003-07-03 00:38:22.000000000 -0700
+++ gcc-3.3.5/gcc/simplify-rtx.c	2005-02-02 02:56:31.000000000 -0800
@@ -1670,7 +1670,8 @@ simplify_plus_minus (code, mode, op0, op
   int n_ops = 2, input_ops = 2, input_consts = 0, n_consts;
   int first, negate, changed;
   int i, j;
-
+  HOST_WIDE_INT fp_offset = 0;
+  
   memset ((char *) ops, 0, sizeof ops);
 
   /* Set up the two operands and then expand them until nothing has been
@@ -1695,6 +1696,10 @@ simplify_plus_minus (code, mode, op0, op
 	  switch (this_code)
 	    {
 	    case PLUS:
+	    if (flag_propolice_protection
+		&& XEXP (this_op, 0) == virtual_stack_vars_rtx
+		&& GET_CODE (XEXP (this_op, 1)) == CONST_INT)
+	      fp_offset = INTVAL (XEXP (this_op, 1));
 	    case MINUS:
 	      if (n_ops == 7)
 		return NULL_RTX;
@@ -1849,10 +1854,10 @@ simplify_plus_minus (code, mode, op0, op
       && GET_CODE (ops[n_ops - 1].op) == CONST_INT
       && CONSTANT_P (ops[n_ops - 2].op))
     {
-      rtx value = ops[n_ops - 1].op;
+      int value = INTVAL (ops[n_ops - 1].op);
       if (ops[n_ops - 1].neg ^ ops[n_ops - 2].neg)
-	value = neg_const_int (mode, value);
-      ops[n_ops - 2].op = plus_constant (ops[n_ops - 2].op, INTVAL (value));
+	value = -value;
+      ops[n_ops - 2].op = plus_constant (ops[n_ops - 2].op, value);
       n_ops--;
     }
 
@@ -1871,6 +1876,54 @@ simplify_plus_minus (code, mode, op0, op
 	  || (n_ops + n_consts == input_ops && n_consts <= input_consts)))
     return NULL_RTX;
 
+  if (flag_propolice_protection)
+    {
+      /* keep the addressing style of local variables
+	 as (plus (virtual_stack_vars_rtx) (CONST_int x))
+	 (1) inline function is expanded, (+ (+VFP c1) -c2)=>(+ VFP c1-c2)
+	 (2) the case ary[r-1], (+ (+VFP c1) (+r -1))=>(+ R (+r -1))
+      */
+      for (i = 0; i < n_ops; i++)
+#ifdef FRAME_GROWS_DOWNWARD
+	if (ops[i].op == virtual_stack_vars_rtx)
+#else
+	if (ops[i].op == virtual_stack_vars_rtx
+	    || ops[i].op == frame_pointer_rtx)
+#endif
+	  {
+	    if (GET_CODE (ops[n_ops - 1].op) == CONST_INT)
+	      {
+		HOST_WIDE_INT value = INTVAL (ops[n_ops - 1].op);
+		if (n_ops < 3 || value >= fp_offset)
+		  {
+		    ops[i].op = plus_constant (ops[i].op, value);
+		    n_ops--;
+		  }
+		else
+		  {
+		    if (!force
+			&& (n_ops+1 + n_consts > input_ops
+			    || (n_ops+1 + n_consts == input_ops && n_consts <= input_consts)))
+		      return NULL_RTX;
+		    ops[n_ops - 1].op = GEN_INT (value-fp_offset);
+		    ops[i].op = plus_constant (ops[i].op, fp_offset);
+		  }
+	      }
+	    /* buf[BUFSIZE]: buf is the first local variable (+ (+ fp -S) S) 
+	       or (+ (fp 0) r) ==> ((+ (+fp 1) r) -1) */
+	    else if (fp_offset != 0)
+	      return NULL_RTX;
+#ifndef FRAME_GROWS_DOWNWARD
+	    /*
+	     * For the case of buf[i], i: REG, buf: (plus fp 0),
+	     */
+	    else if (fp_offset == 0)
+	      return NULL_RTX;
+#endif
+	    break;
+	  }
+    }
+
   /* Put a non-negated operand first.  If there aren't any, make all
      operands positive and negate the whole thing later.  */
 
diff -Naurp gcc-3.3.5.orig/gcc/toplev.c gcc-3.3.5/gcc/toplev.c
--- gcc-3.3.5.orig/gcc/toplev.c	2004-03-05 09:55:51.000000000 -0800
+++ gcc-3.3.5/gcc/toplev.c	2005-02-02 02:56:31.000000000 -0800
@@ -904,6 +904,15 @@ int align_functions_log;
    minimum function alignment.  Zero means no alignment is forced.  */
 int force_align_functions_log;
 
+#if defined(STACK_PROTECTOR) && defined(STACK_GROWS_DOWNWARD)
+/* Nonzero means use propolice as a stack protection method */
+int flag_propolice_protection = 1;
+int flag_stack_protection = 0;
+#else
+int flag_propolice_protection = 0;
+int flag_stack_protection = 0;
+#endif
+
 /* Table of supported debugging formats.  */
 static const struct
 {
@@ -1188,6 +1197,10 @@ static const lang_independent_options f_
    N_("Trap for signed overflow in addition / subtraction / multiplication") },
   { "new-ra", &flag_new_regalloc, 1,
    N_("Use graph coloring register allocation.") },
+  {"stack-protector", &flag_propolice_protection, 1,
+   N_("Enables stack protection") },
+  {"stack-protector-all", &flag_stack_protection, 1,
+   N_("Enables stack protection of every function") } ,
 };
 
 /* Table of language-specific options.  */
@@ -1547,7 +1560,9 @@ static const lang_independent_options W_
   {"missing-noreturn", &warn_missing_noreturn, 1,
    N_("Warn about functions which might be candidates for attribute noreturn") },
   {"strict-aliasing", &warn_strict_aliasing, 1,
-   N_ ("Warn about code which might break the strict aliasing rules") }
+   N_ ("Warn about code which might break the strict aliasing rules") },
+  {"stack-protector", &warn_stack_protector, 1,
+   N_("Warn when disabling stack protector for some reason")}
 };
 
 void
@@ -2449,6 +2464,8 @@ rest_of_compilation (decl)
 
       insns = get_insns ();
 
+      if (flag_propolice_protection) prepare_stack_protection (inlinable);
+  
       /* Dump the rtl code if we are dumping rtl.  */
 
       if (open_dump_file (DFI_rtl, decl))
@@ -5230,6 +5247,12 @@ process_options ()
     /* The presence of IEEE signaling NaNs, implies all math can trap.  */
     if (flag_signaling_nans)
       flag_trapping_math = 1;
+
+    /* This combination makes optimized frame addressings and causes
+       a internal compilation error at prepare_stack_protection.
+       so don't allow it.  */
+    if (flag_stack_protection && !flag_propolice_protection)
+      flag_propolice_protection = TRUE;
 }
 
 /* Initialize the compiler back end.  */
diff -Naurp gcc-3.3.5.orig/gcc/c-common.c gcc-3.3.5/gcc/c-common.c
--- gcc-3.3.5.orig/gcc/c-common.c.orig	2005-11-09 16:40:18.000000000 +0100
+++ gcc-3.3.5/gcc/c-common.c	2005-11-09 16:42:05.000000000 +0100
@@ -5666,6 +5666,12 @@ cb_register_builtins (pfile)
   if (flag_objc && flag_next_runtime)
     cpp_define (pfile, "__NEXT_RUNTIME__");
 
+  /* Define indicator macros of stack-protector state. */
+  if (flag_propolice_protection)
+    cpp_define (pfile, "__SSP__=1");
+  if (flag_stack_protection)
+    cpp_define (pfile, "__SSP_ALL__=2");
+
   /* A straightforward target hook doesn't work, because of problems
      linking that hook's body when part of non-C front ends.  */
 # define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)
