diff -Naurp gcc-3.3.5.orig/gcc/cselib.c gcc-3.3.5/gcc/cselib.c
--- gcc-3.3.5.orig/gcc/cselib.c	2004-09-13 01:54:35.000000000 -0700
+++ gcc-3.3.5/gcc/cselib.c	2005-02-02 00:52:38.000000000 -0800
@@ -1,6 +1,6 @@
 /* Common subexpression elimination library for GNU compiler.
    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
-   1999, 2000, 2001 Free Software Foundation, Inc.
+   1999, 2000, 2001, 2003 Free Software Foundation, Inc.
 
 This file is part of GCC.
 
@@ -123,9 +123,16 @@ static GTY((deletable (""))) cselib_val 
 static GTY((deletable (""))) struct elt_list *empty_elt_lists;
 static GTY((deletable (""))) struct elt_loc_list *empty_elt_loc_lists;
 
+/* An unknown VALUE to be used which replaces any VALUE after it has
+   been garbage collected as useless.  */
+static GTY(()) rtx unknown_addr;
+
 /* Set by discard_useless_locs if it deleted the last location of any
    value.  */
 static int values_became_useless;
+
+static cselib_discard_callback discard_callback;
+static void *discard_callback_arg;
 
 
 /* Allocate a struct elt_list and fill in its two elements with the
@@ -205,6 +212,9 @@ unchain_one_value (v)
   while (v->addr_list)
     unchain_one_elt_list (&v->addr_list);
 
+  if (discard_callback)
+    (*discard_callback) (discard_callback_arg, v->u.val_rtx);
+
   v->u.next_free = empty_vals;
   empty_vals = v;
 }
@@ -1407,6 +1417,9 @@ cselib_init ()
   if (! callmem)
     callmem = gen_rtx_MEM (BLKmode, const0_rtx);
 
+  discard_callback = NULL;
+  discard_callback_arg = NULL;
+
   cselib_nregs = max_reg_num ();
   if (reg_values_old != NULL && VARRAY_SIZE (reg_values_old) >= cselib_nregs)
     {
@@ -1426,6 +1439,31 @@ cselib_init ()
   cselib_current_insn_in_libcall = false;
 }
 
+/* Register a callback for freeing useless VALUEs.  */
+
+void
+cselib_register_discard_callback (callback, arg)
+     cselib_discard_callback callback;
+     void *arg;
+{
+  discard_callback = callback;
+  discard_callback_arg = arg;
+}
+
+/* Return a VALUE that can replace a VALUE which became
+   useless and is to be discarded.  */
+
+rtx
+cselib_unknown_addr ()
+{
+  if (! unknown_addr)
+    {
+      cselib_val *v = new_cselib_val (-1, Pmode);
+      unknown_addr = v->u.val_rtx;
+    }
+  return unknown_addr;
+}
+
 /* Called when the current user is done with cselib.  */
 
 void
diff -Naurp gcc-3.3.5.orig/gcc/cselib.h gcc-3.3.5/gcc/cselib.h
--- gcc-3.3.5.orig/gcc/cselib.h	2004-09-13 01:54:35.000000000 -0700
+++ gcc-3.3.5/gcc/cselib.h	2005-02-02 00:53:54.000000000 -0800
@@ -1,6 +1,6 @@
 /* Common subexpression elimination for GNU compiler.
    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
-   1999 Free Software Foundation, Inc.
+   1999, 2003 Free Software Foundation, Inc.
 
 This file is part of GCC.
 
@@ -60,6 +60,8 @@ struct elt_list GTY(())
   cselib_val *elt;
 };
 
+typedef void (*cselib_discard_callback) PARAMS ((void *, rtx));
+
 extern cselib_val *cselib_lookup	PARAMS ((rtx, enum machine_mode, int));
 extern void cselib_update_varray_sizes	PARAMS ((void));
 extern void cselib_init			PARAMS ((void));
@@ -69,3 +71,6 @@ extern int rtx_equal_for_cselib_p	PARAMS
 extern int references_value_p		PARAMS ((rtx, int));
 extern rtx cselib_subst_to_values	PARAMS ((rtx));
 extern void cselib_invalidate_rtx	PARAMS ((rtx));
+extern void cselib_register_discard_callback
+     PARAMS ((cselib_discard_callback, void *));
+extern rtx cselib_unknown_addr		PARAMS ((void));
diff -Naurp gcc-3.3.5.orig/gcc/sched-deps.c gcc-3.3.5/gcc/sched-deps.c
--- gcc-3.3.5.orig/gcc/sched-deps.c	2004-04-24 12:40:46.000000000 -0700
+++ gcc-3.3.5/gcc/sched-deps.c	2005-02-02 00:52:38.000000000 -0800
@@ -1,7 +1,7 @@
 /* Instruction scheduling pass.  This file computes dependencies between
    instructions.
    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,
-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.
+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,
    and currently maintained by, Jim Wilson (wilson@cygnus.com)
 
@@ -87,6 +87,7 @@ static void sched_analyze_1 PARAMS ((str
 static void sched_analyze_2 PARAMS ((struct deps *, rtx, rtx));
 static void sched_analyze_insn PARAMS ((struct deps *, rtx, rtx, rtx));
 static rtx group_leader PARAMS ((rtx));
+static void sched_discard_callback PARAMS ((void *, rtx));
 
 static rtx get_condition PARAMS ((rtx));
 static int conditions_mutex_p PARAMS ((rtx, rtx));
@@ -998,12 +999,10 @@ sched_analyze_insn (deps, x, insn, loop_
 	     the result is needed by the above register used mask.  */
 
 	  pending = deps->pending_write_insns;
-	  pending_mem = deps->pending_write_mems;
 	  while (pending)
 	    {
 	      add_dependence (insn, XEXP (pending, 0), REG_DEP_OUTPUT);
 	      pending = XEXP (pending, 1);
-	      pending_mem = XEXP (pending_mem, 1);
 	    }
 
 	  pending = deps->pending_read_insns;
@@ -1238,6 +1237,45 @@ sched_analyze_insn (deps, x, insn, loop_
     }
 }
 
+/* Called when cselib is about to discard a VALUE
+   (which can be reused from that point onwards).
+   This function replaces such VALUEs with a special
+   VALUE which can stand for any address.
+   sched_analyze needs to ensure it never calls
+   *_dependence functions with this VALUE in both
+   MEM expressions.  */
+
+static void
+sched_discard_callback (arg, value)
+     void *arg;
+     rtx value;
+{
+  struct deps *deps = (struct deps *) arg;
+  rtx pending_mem;
+
+  pending_mem = deps->pending_read_mems;
+  while (pending_mem)
+    {
+      rtx mem = XEXP (pending_mem, 0);
+
+      if (XEXP (mem, 0) == value)
+	XEXP (mem, 0) = cselib_unknown_addr ();
+
+      pending_mem = XEXP (pending_mem, 1);
+    }
+
+  pending_mem = deps->pending_write_mems;
+  while (pending_mem)
+    {
+      rtx mem = XEXP (pending_mem, 0);
+
+      if (XEXP (mem, 0) == value)
+	XEXP (mem, 0) = cselib_unknown_addr ();
+
+      pending_mem = XEXP (pending_mem, 1);
+    }
+}
+
 /* Analyze every insn between HEAD and TAIL inclusive, creating LOG_LINKS
    for every dependency.  */
 
@@ -1250,7 +1288,10 @@ sched_analyze (deps, head, tail)
   rtx loop_notes = 0;
 
   if (current_sched_info->use_cselib)
-    cselib_init ();
+    {
+      cselib_init ();
+      cselib_register_discard_callback (sched_discard_callback, deps);
+    }
 
   for (insn = head;; insn = NEXT_INSN (insn))
     {
