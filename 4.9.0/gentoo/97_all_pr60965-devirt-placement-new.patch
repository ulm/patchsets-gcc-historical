Fixes OpenJDK, IcedTea, Qt, and Chromium crashes.
https://gcc.gnu.org/PR60965


commit 6977ccded4335bd8c0215ccfcab861598f8e9388
Author: hubicka <hubicka@138bc75d-0d04-0410-961f-82ee72b054a4>
Date:   Mon May 5 19:40:34 2014 +0000

    	PR ipa/60965
    	* g++.dg/ipa/devirt-31.C: New testcase.
    	* g++.dg/ipa/devirt-11.C: Adjust testcase.
    	* ipa-devirt.c (get_class_context): Allow POD to change to non-POD.
    
    
    git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_9-branch@210079 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/ChangeLog                        |  5 +++++
 gcc/ipa-devirt.c                     | 11 +++++++++++
 gcc/testsuite/ChangeLog              |  6 ++++++
 gcc/testsuite/g++.dg/ipa/devirt-11.C |  2 +-
 gcc/testsuite/g++.dg/ipa/devirt-31.C | 23 +++++++++++++++++++++++
 5 files changed, 46 insertions(+), 1 deletion(-)

--- a/gcc/ipa-devirt.c
+++ b/gcc/ipa-devirt.c
@@ -987,6 +987,17 @@ give_up:
   context->outer_type = expected_type;
   context->offset = 0;
   context->maybe_derived_type = true;
+  context->maybe_in_construction = true;
+  /* POD can be changed to an instance of a polymorphic type by
+     placement new.  Here we play safe and assume that any
+     non-polymorphic type is POD.  */
+  if ((TREE_CODE (type) != RECORD_TYPE
+       || !TYPE_BINFO (type)
+       || !polymorphic_type_binfo_p (TYPE_BINFO (type)))
+      && (TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST
+	  || (offset + tree_to_uhwi (TYPE_SIZE (expected_type)) <=
+	      tree_to_uhwi (TYPE_SIZE (type)))))
+    return true;
   return false;
 }
 
--- a/gcc/testsuite/g++.dg/ipa/devirt-11.C
+++ b/gcc/testsuite/g++.dg/ipa/devirt-11.C
@@ -45,5 +45,5 @@ bar ()
 /* While inlining function called once we should devirtualize a new call to fn2
    and two to fn3. While doing so the new symbol for fn2 needs to be
    introduced.  */
-/* { dg-final { scan-ipa-dump-times "Discovered a virtual call to a known target" 3 "inline"  } } */
+/* { dg-final { scan-ipa-dump-times "Discovered a virtual call to a known target" 1 "inline"  } } */
 /* { dg-final { cleanup-ipa-dump "inline" } } */
--- /dev/null
+++ b/gcc/testsuite/g++.dg/ipa/devirt-31.C
@@ -0,0 +1,23 @@
+/* { dg-options "-O2 -std=c++11 -fdump-ipa-inline"  } */
+#include <new>
+
+class EmbeddedObject {
+public:
+  virtual int val() { return 2; }
+};
+
+class Container {
+  alignas(EmbeddedObject) char buffer[sizeof(EmbeddedObject)];
+public:
+  EmbeddedObject *obj() { return (EmbeddedObject*)buffer; }
+  Container() { new (buffer) EmbeddedObject(); }
+};
+
+Container o;
+
+int main()
+{
+  __builtin_printf("%d\n", o.obj()->val());
+}
+/* { dg-final { scan-ipa-dump-not "__builtin_unreachable"  "inline"  } } */
+/* { dg-final { cleanup-ipa-dump "inline" } } */
