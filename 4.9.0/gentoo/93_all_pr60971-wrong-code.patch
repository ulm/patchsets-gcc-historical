http://gcc.gnu.org/PR60971


commit d4cbd343229d110dcc97fc0f6ee224bb66c9e3d0
Author: jakub <jakub@138bc75d-0d04-0410-961f-82ee72b054a4>
Date:   Tue Apr 29 14:45:24 2014 +0000

    	PR tree-optimization/60971
    	* tree-tailcall.c (process_assignment): Reject conversions which
    	reduce precision.
    
    	* c-c++-common/turtore/pr60971.c: New test.
    
    
    git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-4_9-branch@209901 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/ChangeLog                                |  6 +++++
 gcc/testsuite/ChangeLog                      |  5 ++++
 gcc/testsuite/c-c++-common/torture/pr60971.c | 34 ++++++++++++++++++++++++++++
 gcc/tree-tailcall.c                          | 14 ++++++++++--
 4 files changed, 57 insertions(+), 2 deletions(-)

--- a/gcc/tree-tailcall.c
+++ b/gcc/tree-tailcall.c
@@ -285,9 +285,19 @@ process_assignment (gimple stmt, gimple_stmt_iterator call, tree *m,
     {
       /* Reject a tailcall if the type conversion might need
 	 additional code.  */
-      if (gimple_assign_cast_p (stmt)
-	  && TYPE_MODE (TREE_TYPE (dest)) != TYPE_MODE (TREE_TYPE (src_var)))
+      if (gimple_assign_cast_p (stmt))
+	{
+	  if (TYPE_MODE (TREE_TYPE (dest)) != TYPE_MODE (TREE_TYPE (src_var)))
+	    return false;
+
+	  /* Even if the type modes are the same, if the precision of the
+	     type is smaller than mode's precision,
+	     reduce_to_bit_field_precision would generate additional code.  */
+	  if (INTEGRAL_TYPE_P (TREE_TYPE (dest))
+	      && (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (dest)))
+		  > TYPE_PRECISION (TREE_TYPE (dest))))
 	return false;
+	}
 
       if (src_var != *ass_var)
 	return false;
--- /dev/null
+++ b/gcc/testsuite/c-c++-common/torture/pr60971.c
@@ -0,0 +1,34 @@
+/* PR tree-optimization/60971 */
+/* { dg-do run } */
+
+#ifndef __cplusplus
+#define bool _Bool
+#endif
+
+volatile unsigned char c;
+
+__attribute__((noinline)) unsigned char
+foo (void)
+{
+  return c;
+}
+
+__attribute__((noinline)) bool
+bar (void)
+{
+  return foo () & 1;
+}
+
+int
+main ()
+{
+  c = 0x41;
+  c = bar ();
+  if (c != 1)
+    __builtin_abort ();
+  c = 0x20;
+  c = bar ();
+  if (c != 0)
+    __builtin_abort ();
+  return 0;
+}
