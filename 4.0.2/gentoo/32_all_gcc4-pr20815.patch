From: Jan Hubicka <jh at suse dot cz>
To: gcc-patches at gcc dot gnu dot org
Date: Sun, 30 Oct 2005 17:47:39 +0100
Subject: PR profile/28015 (invalid checksum wrt random seed)

Hi,
the problem in testcase is checksum differ because of random seed.
coverage.c already has some logic to strip down random sseds but
obviously it is not enought for C++.  This patch improve it somewhat.  I
am still unsure if it works enought, but fixes testcase (that uses io so
it is not bet for testsuite), so I will commit it if there are no
complains till tomorrow.

profiledbootstrapped i686-pc-gnu-linux, bootstrapped/regtested
x86_64-linux
Honza

2005-10-30  Jan Hubicka  <jh@suse.cz>
	PR profile/20815
	* coverage.c (coverage_checksum_string): Fix code to stip random seeds
	from symbol names while computing checkup.

Index: coverage.c
===================================================================
--- gcc/coverage.c	(revision 106013)
+++ gcc/coverage.c	(working copy)
@@ -445,36 +445,42 @@ coverage_checksum_string (unsigned chksu
      as the checksums are used only for sanity checking.  */
   for (i = 0; string[i]; i++)
     {
+      int offset = 0;
+      if (!strncmp (string + i, "_GLOBAL__N_", 11))
+      offset = 11;
       if (!strncmp (string + i, "_GLOBAL__", 9))
-	for (i = i + 9; string[i]; i++)
-	  if (string[i]=='_')
-	    {
-	      int y;
-	      unsigned seed;
-	      int scan;
+      offset = 9;
 
-	      for (y = 1; y < 9; y++)
-		if (!(string[i + y] >= '0' && string[i + y] <= '9')
-		    && !(string[i + y] >= 'A' && string[i + y] <= 'F'))
-		  break;
-	      if (y != 9 || string[i + 9] != '_')
-		continue;
-	      for (y = 10; y < 18; y++)
-		if (!(string[i + y] >= '0' && string[i + y] <= '9')
-		    && !(string[i + y] >= 'A' && string[i + y] <= 'F'))
-		  break;
-	      if (y != 18)
-		continue;
-	      scan = sscanf (string + i + 10, "%X", &seed);
-	      gcc_assert (scan);
-	      if (seed != crc32_string (0, flag_random_seed))
-		continue;
-	      string = dup = xstrdup (string);
-	      for (y = 10; y < 18; y++)
-		dup[i + y] = '0';
-	      break;
-	    }
-      break;
+      /* C++ namespaces do have scheme:
+         _GLOBAL__N_<filename>_<wrongmagicnumber>_<magicnumber>functionname
+       since filename might contain extra underscores there seems
+       to be no better chance then walk all possible offsets looking
+       for magicnuber.  */
+      if (offset)
+        for (;string[offset]; offset++)
+        for (i = i + offset; string[i]; i++)
+          if (string[i]=='_')
+            {
+              int y;
+
+              for (y = 1; y < 9; y++)
+                if (!(string[i + y] >= '0' && string[i + y] <= '9')
+                    && !(string[i + y] >= 'A' && string[i + y] <= 'F'))
+                  break;
+              if (y != 9 || string[i + 9] != '_')
+                continue;
+              for (y = 10; y < 18; y++)
+                if (!(string[i + y] >= '0' && string[i + y] <= '9')
+                    && !(string[i + y] >= 'A' && string[i + y] <= 'F'))
+                  break;
+              if (y != 18)
+                continue;
+              if (!dup)
+                string = dup = xstrdup (string);
+              for (y = 10; y < 18; y++)
+                dup[i + y] = '0';
+            }
+        break;
     }
 
   chksum = crc32_string (chksum, string);
