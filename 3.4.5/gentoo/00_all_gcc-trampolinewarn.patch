	This trivial patch causes gcc to emit a warning whenever
	it generates a trampoline.  These are otherwise hard to
	locate.
	Kevin F. Quinn <kevquinn@gentoo.org> 21 Dec 2005

--- gcc/gcc/c.opt
+++ gcc/gcc/c.opt
@@ -380,6 +380,10 @@
 C ObjC
 Warn about features not present in traditional C
 
+Wtrampolines
+C ObjC C++ ObjC++
+Warn whenever the compiler generates a trampoline
+
 Wtrigraphs
 C ObjC C++ ObjC++
 Warn if trigraphs are encountered that might affect the meaning of the program
--- gcc/gcc/c-opts.c
+++ gcc/gcc/c-opts.c
@@ -632,6 +632,10 @@
       cpp_opts->warn_traditional = value;
       break;
 
+    case OPT_Wtrampolines:
+      warn_trampolines = value;
+      break;
+
     case OPT_Wtrigraphs:
       cpp_opts->warn_trigraphs = value;
       break;
--- gcc/gcc/flags.h
+++ gcc/gcc/flags.h
@@ -815,4 +815,8 @@
 
 extern int flag_stack_protection;
 
+/* Warn whenever a trampoline is generated. */
+
+extern bool warn_trampolines;
+
 #endif /* ! GCC_FLAGS_H */
--- gcc/gcc/function.c
+++ gcc/gcc/function.c
@@ -137,6 +137,9 @@
 /* Nonzero if at least one trampoline has been created.  */
 int trampolines_created;
 
+/* Warn when a trampoline is generated. */
+bool warn_trampolines = 1;
+
 /* Assign unique numbers to labels generated for profiling, debugging, etc.  */
 static GTY(()) int funcdef_no;
 
@@ -7048,6 +7051,9 @@
 
       /* Put those insns at entry to the containing function (this one).  */
       emit_insn_before (seq, tail_recursion_reentry);
+
+      if (warn_trampolines)
+	warning ("generating trampoline in object (requires executable stack)");
     }
 
   /* If we are doing stack checking and this function makes calls,
