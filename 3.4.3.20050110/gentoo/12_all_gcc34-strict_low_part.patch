2004-11-19  Jakub Jelinek  <jakub@redhat.com>

	PR rtl-optimization/17825
	* combine.c (subst): Ignore STRICT_LOW_PART no matter if REG_P (new)
	or not.

	* gcc.c-torture/compile/20041119-1.c: New test.

--- gcc/combine.c.jj	2004-10-28 15:09:05.000000000 +0200
+++ gcc/combine.c	2004-11-19 15:15:01.031574634 +0100
@@ -3417,10 +3417,10 @@ subst (rtx x, rtx from, rtx to, int in_d
 	      /* If this is a register being set, ignore it.  */
 	      new = XEXP (x, i);
 	      if (in_dest
-		  && (code == SUBREG || code == STRICT_LOW_PART
-		      || code == ZERO_EXTRACT)
 		  && i == 0
-		  && GET_CODE (new) == REG)
+		  && (((code == SUBREG || code == ZERO_EXTRACT)
+		       && GET_CODE (new) == REG)
+		      || code == STRICT_LOW_PART))
 		;
 
 	      else if (COMBINE_RTX_EQUAL_P (XEXP (x, i), from))
--- gcc/testsuite/gcc.c-torture/compile/20041119-1.c.jj	2004-11-19 15:32:36.679393511 +0100
+++ gcc/testsuite/gcc.c-torture/compile/20041119-1.c	2004-11-19 15:31:05.000000000 +0100
@@ -0,0 +1,30 @@
+/* PR rtl-optimization/17825 */
+#ifdef __i386__
+register unsigned int reg __asm ("esi");
+#elif defined __x86_64__
+register unsigned int reg __asm ("r14");
+#else
+unsigned int reg;
+#endif
+
+struct S
+{
+  unsigned int h[8];
+} *b;
+unsigned int c;
+void foo (int);
+
+void
+bar (void)
+{
+  unsigned int j, k, l, m;
+
+  j = (reg & 0xffff) | ((b->h[2] & 0xffff) << 16);
+  k = c & 0xffff;
+  if (k == 0)
+    foo (0);
+  l = (j / k) & 0xffff;
+  m = (j % k) & 0xffff;
+  reg = (reg & 0xffff0000) | l;
+  b->h[2] = (b->h[2] & 0xffff0000) | m;
+}
