2004-10-27  David Mosberger  <davidm@hpl.hp.com>
	    James E Wilson  <wilson@specifixinc.com>

	PR target/13158
	* config/ia64/ia64.c (ia64_expand_epilogue): Set RTX_FRAME_RELATED_P on
	sibcall alloc instruction.
	(process_set): Handle sibcall alloc instruction.

2004-10-26  James E Wilson  <wilson@specifixinc.com>

	PR target/18010
	* emit-rtl.c (emit_copy_of_insn_after): Copy RTX_FRAME_RELATED_P.

2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>

	* config/ia64/ia64.c: Use const0_rtx instead of GEN_INT (0).

--- gcc/config/ia64/ia64.c	7 Oct 2004 13:18:34 -0000	1.328
+++ gcc/config/ia64/ia64.c	27 Oct 2004 22:44:07 -0000	1.329
@@ -3154,10 +3154,13 @@ ia64_expand_epilogue (int sibcall_p)
 	 preserve those input registers used as arguments to the sibling call.
 	 It is unclear how to compute that number here.  */
       if (current_frame_info.n_input_regs != 0)
-	emit_insn (gen_alloc (gen_rtx_REG (DImode, fp),
-			      GEN_INT (0), GEN_INT (0),
-			      GEN_INT (current_frame_info.n_input_regs),
-			      GEN_INT (0)));
+	{
+	  rtx n_inputs = GEN_INT (current_frame_info.n_input_regs);
+	  insn = emit_insn (gen_alloc (gen_rtx_REG (DImode, fp),
+				const0_rtx, const0_rtx,
+				n_inputs, const0_rtx));
+	  RTX_FRAME_RELATED_P (insn) = 1;
+	}
     }
 }
 
@@ -7180,7 +7183,7 @@ bundling (FILE *dump, int verbose, rtx p
 	    for (i = add_cycles [INSN_UID (insn)]; i > 0; i--)
 	      {
 		/* Insert "MII;" template.  */
-		ia64_emit_insn_before (gen_bundle_selector (GEN_INT (0)),
+		ia64_emit_insn_before (gen_bundle_selector (const0_rtx),
 				       insn);
 		ia64_emit_insn_before (gen_nop (), insn);
 		ia64_emit_insn_before (gen_nop (), insn);
@@ -7788,13 +7791,24 @@ process_set (FILE *asm_out_file, rtx pat
     {
       dest_regno = REGNO (dest);
 
-      /* If this isn't the final destination for ar.pfs, the alloc
-	 shouldn't have been marked frame related.  */
-      if (dest_regno != current_frame_info.reg_save_ar_pfs)
-	abort ();
-
-      fprintf (asm_out_file, "\t.save ar.pfs, r%d\n",
-	       ia64_dbx_register_number (dest_regno));
+      /* If this is the final destination for ar.pfs, then this must
+	 be the alloc in the prologue.  */
+      if (dest_regno == current_frame_info.reg_save_ar_pfs)
+	fprintf (asm_out_file, "\t.save ar.pfs, r%d\n",
+		 ia64_dbx_register_number (dest_regno));
+      else
+	{
+	  /* This must be an alloc before a sibcall.  We must drop the
+	     old frame info.  The easiest way to drop the old frame
+	     info is to ensure we had a ".restore sp" directive
+	     followed by a new prologue.  If the procedure doesn't
+	     have a memory-stack frame, we'll issue a dummy ".restore
+	     sp" now.  */
+	  if (current_frame_info.total_size == 0)
+	    /* if haven't done process_epilogue() yet, do it now */
+	    process_epilogue ();
+	  fprintf (asm_out_file, "\t.prologue\n");
+	}
       return 1;
     }
 
--- gcc/emit-rtl.c	20 Oct 2004 00:23:16 -0000	1.421
+++ gcc/emit-rtl.c	27 Oct 2004 01:36:11 -0000	1.422
@@ -5548,6 +5548,11 @@ emit_copy_of_insn_after (rtx insn, rtx a
 
   INSN_LOCATOR (new) = INSN_LOCATOR (insn);
 
+  /* If the old insn is frame related, then so is the new one.  This is
+     primarily needed for IA-64 unwind info which marks epilogue insns,
+     which may be duplicated by the basic block reordering code.  */
+  RTX_FRAME_RELATED_P (new) = RTX_FRAME_RELATED_P (insn);
+
   /* Copy all REG_NOTES except REG_LABEL since mark_jump_label will
      make them.  */
   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))
